{"version":3,"sources":["images/clover_icon.svg","images/bird_icon.svg","faucet/faucet.js","index.js"],"names":["Faucet","useState","open","setOpen","message","setMessage","status","setStatus","address","tweetUrl","setTweetUrl","tweetRegex","extractTweetId","text","length","match","getCLV","a","fetch","method","body","JSON","stringify","tweetId","headers","response","ok","json","res","Alert","props","elevation","variant","className","Snackbar","autoHideDuration","onClose","anchorOrigin","vertical","horizontal","severity","width","height","src","CloverIcon","alt","type","placeholder","value","onChange","e","target","onClick","textTemplate","query","composeTweetLink","window","BirdIcon","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+OAAe,G,MAAA,IAA0B,yCCA1B,MAA0B,sC,uBCqH1BA,MA9Gf,WAAmB,IAAD,EACUC,oBAAS,GADnB,mBACPC,EADO,KACDC,EADC,OAEgBF,mBAAS,IAFzB,mBAEPG,EAFO,KAEEC,EAFF,OAGcJ,mBAAS,IAHvB,mBAGPK,EAHO,KAGCC,EAHD,OAIgBN,mBAAS,8CAJzB,mBAIPO,EAJO,aAKkBP,mBAAS,KAL3B,mBAKPQ,EALO,KAKGC,EALH,KA2BRC,EAAa,uEAEnB,SAASC,EAAeC,GACpB,IAAKA,GAAwB,IAAhBA,EAAKC,OACd,MAAO,GAEX,IAAMC,EAAQF,EAAKE,MAAMJ,GACzB,OAAII,GAASA,EAAM,GAAGD,OAAQ,EACnBC,EAAM,GAEV,GAGX,IAAMC,EAAM,uCAAG,8BAAAC,EAAA,0DACPL,EAAeH,GADR,iCAEgBS,MAAM,mEAAoE,CAC7FC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,QAASX,EAAeH,KAC9Ce,QAAS,CACL,OAAU,kCACV,eAAgB,sBAPjB,YAEDC,EAFC,QAWMC,GAXN,gBAYHnB,EAAU,WAZP,wCAcekB,EAASE,OAdxB,QAcGC,EAdH,OAeHzB,GAAQ,GACRE,EAAWuB,EAAIxB,SACfG,EAAU,WAjBP,4CAAH,qDAsBZ,SAASsB,EAAMC,GACX,OAAO,cAAC,IAAD,aAAUC,UAAW,EAAGC,QAAQ,UAAaF,IAGxD,OACI,sBAAKG,UAAU,qBAAf,UACI,cAACC,EAAA,EAAD,CACIhC,KAAMA,EACNiC,iBAAkB,IAClBC,QAAS,kBAAMjC,GAAQ,IACvBkC,aAAc,CACVC,SAAU,MACVC,WAAY,UANpB,SASI,cAACV,EAAD,CAAOO,QAAS,kBAAMjC,GAAQ,IAAQqC,SAAUlC,EAAhD,SACKF,MAGT,sBAAK6B,UAAU,qCAAf,UACI,qBAAKQ,MAAO,GAAIC,OAAQ,GAAIC,IAAKC,EAAYC,IAAI,KACjD,kEAEJ,sBAAKZ,UAAU,wCAAf,UACI,uBACIa,KAAK,OACLC,YAAY,mEACZC,MAAOvC,EACPwC,SAAU,SAACC,GAAD,OAAOxC,EAAYwC,EAAEC,OAAOH,UAE1C,wBAAQI,QAASpC,EAAjB,4BAEJ,sBAAKiB,UAAU,4BAAf,UACI,8CACA,0NACI,sBAAMmB,QA/EE,WACpB,IAAM3C,EAPV,SAA0BD,GACtB,IAAMK,EALW,SAACL,GAClB,MAAM,4CAAN,OAAmDA,EAAnD,MAIa6C,CAAa7C,GACpB8C,EAAK,eAAWzC,EAAX,sBAPE,2BAOF,2BACX,MAAM,oCAAN,OAA2CyC,GAI1BC,CAAiB/C,GAAW,8CACxCgD,OAAOtD,KAAKO,KACbN,GAAQ,GACRE,EAAW,qEACXE,EAAU,WA0EF,uBADJ,4DAIA,sBAAK0B,UAAU,cAAf,UACI,qBAAKQ,MAAO,GAAIC,OAAQ,GAAIC,IAAKc,EAAUZ,IAAI,KAC/C,+RCxGpBa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.da419489.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/clover_icon.1dc15a5a.svg\";","export default __webpack_public_path__ + \"static/media/bird_icon.2fd3f500.svg\";","import React, { useState } from 'react'\nimport './faucet.css'\nimport CloverIcon from '../images/clover_icon.svg'\nimport BirdIcon from '../images/bird_icon.svg'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\n\nfunction Faucet() {\n    const [open, setOpen] = useState(false)\n    const [message, setMessage] = useState('')\n    const [status, setStatus] = useState('')\n    const [address, setAddress] = useState('0x0000000000000000000000000000000000000000')\n    const [tweetUrl, setTweetUrl] = useState('')\n\n    const hashTags = 'Clover,CLV,CloverNetwork'\n    const textTemplate = (address: string) => {\n        return `Requesting Clover preview net funds into ${address} !`\n    }\n\n    function composeTweetLink(address: string) {\n        const text = textTemplate(address)\n        const query = `text=${text}&&hashtags=${hashTags}&&related=CrustNewtowrk`\n        return `https://twitter.com/intent/tweet?${query}`\n    }\n\n    const openTweetWindow = () => {\n        const tweetUrl = composeTweetLink(address || '0x0000000000000000000000000000000000000000')\n        if (!window.open(tweetUrl)) {\n            setOpen(true)\n            setMessage('Error opening browser window, please check your browser settings.')\n            setStatus('error')\n        }\n    }\n\n    const tweetRegex = /^https?:\\/\\/twitter\\.com\\/(?:#!\\/)?(\\w+)\\/status(es)?\\/(\\d+)(\\?.*)?$/\n\n    function extractTweetId(text: string | null): string {\n        if (!text || text.length === 0 ) {\n            return ''\n        }\n        const match = text.match(tweetRegex)\n        if (match && match[3].length >0 ) {\n            return match[3]\n        }\n        return ''\n    }\n\n    const getCLV = async () => {\n        if (extractTweetId(tweetUrl)) {\n            const response = await fetch('https://faucet-iris-api.clover.finance/clover/api/faucet/request', {\n                method: 'POST',\n                body: JSON.stringify({tweetId: extractTweetId(tweetUrl)}),\n                headers: {\n                    'Accept': 'application/json,text/plain,*/*',\n                    'Content-Type': 'application/json',\n                },\n            })\n\n            if (response.ok) {\n                setStatus('success')\n            } else {\n                const res = await response.json()\n                setOpen(true)\n                setMessage(res.message)\n                setStatus('warning')\n            }\n        }\n    }\n\n    function Alert(props: AlertProps) {\n        return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n    }\n\n    return (\n        <div className=\"first-page-wrapper\">\n            <Snackbar\n                open={open}\n                autoHideDuration={6000}\n                onClose={() => setOpen(false)}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <Alert onClose={() => setOpen(false)} severity={status}>\n                    {message}\n                </Alert>\n            </Snackbar>\n            <div className=\"first-page-content-top flex-center\">\n                <img width={36} height={36} src={CloverIcon} alt=\"\"/>\n                <span>Clover Authenticated Faucet</span>\n            </div>\n            <div className=\"first-page-content-center flex-center\">\n                <input\n                    type=\"text\"\n                    placeholder=\"Please paste the twitter link which contains your Clover address\"\n                    value={tweetUrl}\n                    onChange={(e) => setTweetUrl(e.target.value)}\n                />\n                <button onClick={getCLV}>Give me CLV</button>\n            </div>\n            <div className=\"first-page-content-bottom\">\n                <h4>How to fund?</h4>\n                <p>This faucet is running on the Clover preview network (Iris). To prevent malicious actors from exhausting all funds, requests are tied to Twitter social network accounts. Anyone having a\n                    <span onClick={openTweetWindow}> Twitter </span>\n                    account may request funds within the permitted limits.\n                </p>\n                <div className=\"flex-center\">\n                    <img width={30} height={26} src={BirdIcon} alt=\"\"/>\n                    <span>To request funds via Twitter, make a tweet with your Clover address pasted into the contents (surrounding text doesn't matter). Copy-paste the tweets URL into the above input box and get your CLV. Each account can get 5 CLV every three days.</span>\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default Faucet;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Faucet from './faucet/faucet'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Faucet />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}